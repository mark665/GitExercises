 Isilon Git Workshop PrerequisitesSetup Git 	Git is installed (https://wiki.west.isilon.com/index.php/Git)	      Add SSH Key (https://wiki.west.isilon.com/index.php/Git)Workshop Setup      Setup global user name and email        git config --global user.name “[your name]”       git config --global user.email “[your email address]”      Note: This is a per machine setting, not per repositoryIsilon Workflow  (Prep)1) Navigate to: https://github.west.isilon.com/IsiEngTraining/TrainingExercises2) Sign in using your Isilon desktop account3) Fork the TrainingExercises repository from IsiEngTraining/ TrainingExercisesa) Click on the  icon in the upper right corner b) Choose your account as the destination of the fork i.e. @mprice c) Wait for the fork to completed) In the lower right URL field select SSH as the type of clone URL e) Click on the  icon to copy the URl to the clipboard4) Locally clone the TrainingExercises repository from your accounta) Open a command shellb) Navigate to the directory you typically store source, then clone the repository git clone [ paste SSH URL ] i.e. git clone git@github.west.ision.com:mprice/TrainingExercises.git5) Clone the GitTraining repository, and copy class scripts out of repositorya) Navigate to the directory you typically store source, then clone the repository git clone git@github.west.isilon.com:IsiEngTraining/GitTraining.git cp *.sh ..	6) Fork OneFS repository from IsiEngTraining organizatona) Navigate to https://github.west.isilon.com/IsiEngTraining/onefsb) Fork the OneFS repository, choosing your account as the fork destination.c) Copy the repository URLd) Locally clone the OneFS repository.  This may take several minutes to clone especially for those who are remote to Seattle.git clone git@github.west.isilon.com:[ desktop id ]/onefs.gitLab ExercisesCreating Blobs1) From the directory you stash source code, create a new local repository git init NewRepo2) Change directory to NewRepo3) Create a blob object echo “Hello” | git hash-object –w --stdin Note: (1) –w Writes the object into the object database (.git/objects)(2) –stdin selects standard in as the source of contents4) Verify that the object is in the object folder ls .git/objects/[ first 2 digits from the hash ]/[ remaining hash digits ]5) Verify that the object type is a blob git cat-file –t [ hash of “Hello” object ]6) Verify that the object value is “Hello” git cat-file –p [ hash of “Hello” object ]Plumbing Trees1) Add the blob to the index, adding file permissions and a file name  git update-index --add --cacheinfo 100644 [ hash of “Hello” object ] hello.txt2) Write the index to a tree object git write-tree3) Verify the object type is a tree git cat-file –t [ hash of tree object from step 2 ]4) Verify the object type, parent, author and committer git cat-file –p [ hash of tree object from step 2 ]5) Create a second blob Echo “World” | git hash-object –w --stdin 6) Add the second blob to the index, adding file permissions and a file name git update-index --add --cacheinfo 100644 [ hash of “World” object ] world.txt7) Write the index to a tree object git write-tree8) Create a commit object referencing the tree from step 2 git commit-tree [ hash from tree from step 2] –m “[ commit message ]”9) Create a commit object referencing the tree from step 7.  This time add the commit object from step 8 as the parent commit git commit-tree [ hash of tree from step 7 ] –p [hash of commit object from step 8] –m “[ commit message ]”10) Verify object type, parent, author, committer of second tree commit git cat-file -p [ hash of commit object from step 9 ]11) Create a reference for the master branch to the commit from step 8 echo [ hash of commit object from step 9 ] > .git/refs/heads/master 12) Run and think about the results git status13) Create the files that the blobs describe echo “Hello” > hello.txt echo “World” > world.txtTagging (optional)1) Create a tag  git tag -a -m “Annotate tag example” tag-1 master2) Show tag reference git show-ref tag-13) Show branch reference git show-ref master4) Verify object type, tag reference, tagger git cat-file -p [ tag-1 hash ]Manipulating Files1) Create 5 files with 2 files in subdirectory2) Stage a file git add [ file name ]3) Commit the file git commit -m “[ commit message ]”4) Check the file status commit [ file name ] git status5) Stage a second file git add [ file name ]6) Edit the newly staged file7) Stage the file git add [file name]8) Commit the file git commit -m “[ commit message ]”9) Stage a third file git add [ file name ]10) Move/Rename a file git mv [ source file ] [ sub directory/destination file ]11) Stage the moved/renamed file git add [ moved/renamed file ]12) Check the file status git status13) Commit the file git commit -m “[ commit message ]”Manipulating Branches1) Confirm you are on the master branch git branch git checkout master2) Create a new branch from master git branch [ new branch name ]3) Checkout the new branch git checkout  [ branch name ]4) Edit a file5) Stage the file git add [ filename ]6) Commit the file git commit -m “[ commit message ]”7) Checkout branch you wish to merge into git checkout master8) Merge the modified branch into the master branch git merge [ source branch name ]  Note: At this point you should still have 2 branches - master and your newly created branch.9) Back out of this repository and navigate to the GitTraining scripts10) Run branch conflict script ./git-create-conflict.sh11) Change directory into i-merge-conflict repository12) Merge the update branch to master git checkout master git merge updateb) Note : this is a fast-forward merge, use git log –-oneline –graph to examine results 13) Merge fix branch git merge fix14) Resolve merge conflict Manually edit, add, commitb) Note : this is a merge with two parents, use git log –-oneline –graph to examine results15) Merge topic branch git merge topic16) Resolve merge conflict Manually edit, add, commit17) Verify the changes to the file cat FileA18) Back out of repository and delete  rm –rf i-merge-conflict)Remote Work	1) Re-use repository we’ve been working in for previous exercises (NewRepo)2) Create a branch with your desktop id (i.e. mprice) git branch [desktop]	 git checkout [desktop]3) Set up remote to the TrainingExercises repository in your account space Git remote add training git@github.west.isilon.com:[desktop id]/ TrainingExercises.git4) Fetch git fetch training5) Merge remote master branch into [desktop id] branch git merge training/master6) Push into github git push --set-upstream training [desktop id]7) Pull Requesta) Go into github and create a pull request from your account to the IsiEngTraining organization 8) Instructor will merge one pull request, then show others in conflict, unable to mergeManipulating History1) Back out of the NewRepo repository to where you copied the scripts from the GitTraining repository2) Run git-prep-interactive-rebase.sh3) Rebase interactive BR_TWO to combine commits into one commit. cd i-rebase git log --oneline git checkout BR_TWO git log –-oneline git rebase –i [short hash of last commit common to two log messages]  edit to manipulate commits4) Change the commit message for the commit you just created git log --oneline git rebase [short hash of commit~1]	 use ‘r’ to change commit message in editor5) Rebase BR_ONE against master git checkout BR_ONE git rebase master6) Merge BR_ONE into master git checkout master git merge BR_ONE7) Rebase BR_TWO against master git checkout BR_TWO git rebase master Resolve conflict git add [filename] git rebase --continue8) merge BR_TWO into master git checkout master git merge BR_TWOIsilon WorkflowSteps 1-3 should have already been completed at the beginning of the course. If so, then start with step 4.1) Navigate to https://github.west.isilon.com/IsiEngTraining/onefs2) Fork a new personal repository from the team repositorya) Click on the  icon in the upper right corner b) Choose your account as the destination of the forkc) Navigate to your account/OneFS repod) In the lower right URL field select SSH as the type of clone URL e) Click on the  icon to copy the URl to the clipboard3) Clonea) Open a command shellb) Navigate to the directory you typically store source git clone [paste SSH URL]4) Updatesa) Create a branch based on the training_next branch and check it out.b) Edit a .c file, add, commit, rebase against origin/training_next and push the results to github (origin branch [desktop id])5) Review Boarda) From command prompt, use rbt to post to Review Board rbt post --server \       https://reviewboard.west.isilon.com/ \    --repository IsiEngTrainnig/onefs \    --username [desktop id] --password [desktop password] \    --parent IsiEngTrainnig/training_next\    --publish6) Pull Requestsa) Create a pull request from your new branch back to “training_next” branch in the IsiEngTraining organizationb) Instructor will approve and merge pull request7) Team Leads extra worka) Reviewing pull requests for qualityb) Approving pull requestsIsilon Engineering Training		 7 | Page