 Isilon Git Workshop PrerequisitesSetup Git 	Git is installed (https://wiki.west.isilon.com/index.php/Git)	      Add SSH Key (https://wiki.west.isilon.com/index.php/Git)Workshop Setup      Setup global user name and email        git config –global user name “[your name]”       git config –global user email “[your email address]”      Note: This is a per machine setting, not per repositoryIsilon Workflow  (Prep)1. Navigate to git@github.west.isilon.com:IsiEngTraining/GitTraining.git2. Fork a new personal repository from the team repositorya. Click on the  icon in the upper right corner b. Chose your account as the destination of the forkc. Navigate to your account/OneFS repod. In the lower right URL field select SSH as the type of clone URL e. Click on the  icon to copy the URl to the clipboard3. Clonea. Open a command shellb. Navigate to the directory you typically store sourcegit clone [paste SSH URL]Lab ExercisesBlob Exercise1. From the directory you stash source code, create a new local repositorygit init NewRepo2. Create a blob objectecho “Hello” | git hash-object –w --stdinNote:* –w Writes the object into the object database (.git/objects)2. Verify that the object is in the object folderls .git/objects/[first 2 digits from the hash]/[remaining hash digits]3. Verify that the object type is a blobgit cat-file –t [first 8 digits of hash]4. Verify that the object value is “Hello”git cat-file –p [first 8 digits of hash]Tree Exercise1. Add the blob to the index, adding file permissions and a file name git update-index --add --cacheinfo 100644 [blob hash] hello.txt2. Write the tree you just created to the object storegit write-tree3. Verify the object type is a treegit cat-file –t [ short hash of tree object from step 2 ]4. Verify the object type, parent, author and committergit cat-file –p [short hash of tree object from step 2]3. Create a second blobEcho “World” | git hash-object –w --stdin 5. Add the second blob to the index, adding file permissions and a file namegit update-index --add --cacheinfo 100644 [full hash of blob from step 3] world.txt6. Write the tree you just created to the object storegit write-tree7. Create a commit object referencing the first tree from step 2git commit-tree [short hash from step 6] –m “[commit message]”8. Create a commit object referencing the tree from step.  This time add the commit object from step 7 as the parent commitgit commit-tree [short hash of tree from step 6] –p [hash of commit object from step 7] –m “[commit message]”9. Verify object type, parent, author, committer of second tree commitgit cat-file -p [short hash of commit object from step 8]10. Create a reference for the master branch to the commit from step 8echo [short hash of commit object from step 8]” > .git/refs/heads/master 11. Run and think about the resultsgit status12. Create the files that the blobs describeecho “Hello” > hello.txtecho “World” > world.txtTag Exercise1. Create a tag git tag -a -m “Annotate tag example” tag-1 master2. Show tag referencegit show-ref tag-13. Show branch referencegit show-ref master4. Verify object type, tag reference, taggergit cat-file -p [first 8 digits of tag-1 hash]
Files Exercise1. Create 5 files with 2 files in subdirectory2. Stage a filegit add [file name]3. Commit the filegit commit [file name] -m “[commit message]”4. Check the file statusgit status5. Stage a second filegit add [file name]6. Edit the newly staged file7. Stage the filegit add [file name]8. Commit the filegit commit [file name] -m “[commit message]”9. Stage a third filegit add [file name]10. Move/Rename a filegit mv [source file] [sub directory/destination file]11. Stage the moved/renamed filegit add [moved/renamed file]12. Check the file statusgit status13. Commit the filegit commit [file name] -m “[commit message]”Branches1. Create a new branch git branch[new branch name]2. Checkout the branchgit checkout [branch name]3. Edit file4. Stage filegit add [filename]5. Commit the filegit commit [file name]6. Checkout branch you wish to merge TOgit checkout [destination branch]7. Merge the branch to the master branchgit merge [target branch name] Note: At this point you should have 2 branches- Master and your newly created branch. This exercise is a local branch merge so the branch name being merged to should be Master.8. Back out of this repositorycd ..9. Run branch conflict script./git-create-conflict.sh10. Change directory into i-merge-conflict repository11. Merge the update branch to mastergit checkout mastergit merge update12. Merge fix branchgit merge fix13. Resolve merge conflictManually edit, add, commit14. Merge topic branchgit merge topic15. Resolve merge conflictManually edit, add, commit16. Look at merge history with log commandgit log –-oneline --graph17. Verify the changes to the filecat FileA17. Back out of repository and delete        rm –rf i-merge-conflict)Remote Work	1. Re-use repository we’ve been working in for previous exercises (NewRepo)2. Create a branch with your desktop id (i.e. mprice)git branch [desktop]	git checkout [desktop]3. Set up remote repositoryGit remote add training git@github.west.isilon.com:IsiEngTraining/GitTraining.git4. Fetchgit fetch training5. Merge remote master branch into [desktop id] branchgit merge training master6. Push into githubgit push –set-upstream training [desktop id]7. Pull RequestGo into github and create a pull request for your branch into master8. Instructor will merge one pull request, then show others in conflict, unable to mergeManipulating History1. Run git-prep-interactive-rebase.sh2. Rebase interactive BR_TWO to combine commits into one commit.cd i-rebasegit log --onelinegit checkout BR_TWOgit log –-onelinegit rebase –i [short hash of last commit common to two log messages]        edit to manipulate commits3. Change the commit message for the commit you just createdgit log --onelinegit rebase [short hash of commit~1]	use ‘r’ to change commit message in editor4. Rebase BR_ONE against mastergit checkout BR_ONEgit rebase master5. Merge BR_ONE into mastergit checkout mastergit merge BR_ONE6. Rebase BR_TWO against mastergit checkout BR_TWOgit rebase masterResolve conflictgit rebase --continue7. merge BR_TWO into mastergit checkout mastergit merge BR_TWO
Isilon Workflow1. Navigate to git@github.west.isilon.com:IsiEngTraining/GitTraining.git2. Fork a new personal repository from the team repositorya. Click on the  icon in the upper right corner b. Chose your account as the destination of the forkc. Navigate to your account/OneFS repod. Select branch “training”i. Create a branch in your account with your usernamea. In the lower right URL field select SSH as the type of clone URL b. Click on the  icon to copy the URl to the clipboard5. Cloninga. Open a command shellb. Navigate to the directory you want the repository to be cloned toc. Type: git clone [paste SSH URL][git@github.west.isilon.com:[your-git-username]/[team-branch].git]		Wait (OneFS can take time to clone)6. UpdatesEdit a .c file, add, commit, rebase against “training_next” and push the results to github (origin branch [desktop id])7. Review BoardFrom command prompt, use rbt to post to Review Board8. Pull Requestsa. Create a pull request from your new branch back to “training” branchb. Instructor will approve and merge pull request9. Team Leads extra worka. Reviewing pull requests for qualityb. Approving pull requestsIsilon Engineering Training		 7 | Page